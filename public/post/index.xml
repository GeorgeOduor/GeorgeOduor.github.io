<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on George</title>
    <link>https://georgeoduor.netlify.app/post/</link>
    <description>Recent content in Posts on George</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;copy; {year}</copyright>
    <lastBuildDate>Thu, 15 Jul 2021 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://georgeoduor.netlify.app/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OOP in R,Simulating a banking system.</title>
      <link>https://georgeoduor.netlify.app/post/r/oop-r/oop_r/</link>
      <pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://georgeoduor.netlify.app/post/r/oop-r/oop_r/</guid>
      <description>
&lt;script src=&#34;https://georgeoduor.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;introduction.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction.&lt;/h2&gt;
&lt;p&gt;Object Oriented Programming has been the best way to write programs in any language.But why OOP technique?As a matter of fact our physical world is made up of objects with different qualities.OOP is based on the concept of “objects” which can contain data or code.&lt;/p&gt;
&lt;p&gt;A good example can be an animal object with several properties like movement,sound,diet,life span etc.We can also talk about a “bank object” , which I will be considering in this post, with properties like customers,accounts and methods like accounts creation,loan repayments etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;why-oop-in-r.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why OOP in R.&lt;/h2&gt;
&lt;p&gt;Well,personally I begun my R journey with simple procedure oriented programming then I graduated to functional programming.Its only after being exposed to the goodies that come with structuring my scripts in an Object Oriented Way using python.R offers more than one method of writing Object Oriented programs such as S3,S4,R6 etc.In this post i will focus on using R6 Classes offered by the &lt;a href=&#34;https://r6.r-lib.org/articles/Introduction.html&#34;&gt;R6 package&lt;/a&gt;.This is because it gives an almost similar method Python uses.If you are not good with python,you have nothing to worry,all you need to know is how to write an R function and simple operations.&lt;/p&gt;
&lt;p&gt;Much about OOP can be found &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-oriented_programming&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some key concepts we are going to learn here are:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Classes Definition&lt;/li&gt;
&lt;li&gt;Class instances&lt;/li&gt;
&lt;li&gt;Methods:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Public&lt;/li&gt;
&lt;li&gt;Private&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Introspection&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;hypothetical-example.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Hypothetical example.&lt;/h3&gt;
&lt;p&gt;In this post,I will go through a simple banking system that enables its us to:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Create accounts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make deposits&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make withdrawals&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Request and pay loans.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simulate a simple USSD request in the console.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Excited?Lets proceed.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;required-packages.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Required packages.&lt;/h3&gt;
&lt;p&gt;We will only need two packages for this project,namely ,&lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt; and &lt;a href=&#34;https://r6.r-lib.org/articles/Introduction.html&#34;&gt;R6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Install these packages if you don have them already in your current R installation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#install.packages(&amp;quot;R6&amp;quot;)
#install.packages(&amp;quot;tidyverse&amp;quot;)
# load the packages here
suppressWarnings(suppressPackageStartupMessages(library(R6)))
suppressWarnings(suppressPackageStartupMessages(library(tidyverse)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;defining-classes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Defining Classes&lt;/h2&gt;
&lt;p&gt;The focal point of OOP is a &lt;strong&gt;class&lt;/strong&gt; which are used to create &lt;strong&gt;objects.&lt;/strong&gt; A class is is the blueprint of an object.It literally describes describes what an object will be but separate from the object itself.The same class can be used to for creating multiple objects.&lt;/p&gt;
&lt;p&gt;R6 Classes are created using the key word &lt;code&gt;R6Class&lt;/code&gt;.It contains functions called &lt;strong&gt;methods&lt;/strong&gt;.The methods specify the behavior and actions that an object created with the same class can perform using its specif data.&lt;/p&gt;
&lt;p&gt;Its important to take note of two most important arguments of the class:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;classname&lt;/code&gt; : Defines the class name.Not required for the class to work though,but as described in the package documentation,its useful for S3 method dispatch.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;public&lt;/code&gt; : A list of public members, which can be functions (methods) and non-functions (fields).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Below is a simple way to create a class in R6.First ,lets call our class &lt;em&gt;CBS&lt;/em&gt;-short for core banking system.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;CBS &amp;lt;- R6Class(classname = &amp;quot;CBS&amp;quot;,public = list(
  accs = tibble(&amp;quot;Full Name&amp;quot; = NA,&amp;quot;IDNo&amp;quot; = NA,&amp;#39;AccountNo&amp;#39; = NA,&amp;#39;AccountBalance&amp;#39; = NA,&amp;#39;LoanBalance&amp;#39; = NA),
  bank_name = NA,
  initialize = function(accs = NULL,bank_name) {
    self$bank_name = bank_name
    cat(paste(&amp;#39; --------- \n This is &amp;#39;,self$bank_name,&amp;#39;. \n --------- \n&amp;#39;))
  }
))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above class i have defined a class &lt;code&gt;CBS&lt;/code&gt; with a method &lt;code&gt;initialize()&lt;/code&gt;.For someone coming from python,you can think of this as the &lt;code&gt;__init__&lt;/code&gt; method.It is called when an instance of the object class is created using the class name as function.In this method the &lt;code&gt;self$attribute&lt;/code&gt; can be used to set the initial value of an instance’s attributes.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;class-instantiation.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Class instantiation.&lt;/h2&gt;
&lt;p&gt;Instances are objects built from classes which contains real data and objects.To instantiate an object of the class above we use, &lt;code&gt;$new()&lt;/code&gt; method as shown below.Lets call our bank &lt;strong&gt;ABCBank&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ABCBank &amp;lt;- CBS$new(bank_name = &amp;#39;ABCBank&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  --------- 
##  This is  ABCBank . 
##  ---------&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;methods-and-class-atributes.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Methods and class atributes.&lt;/h2&gt;
&lt;p&gt;Classes have other methods defined to add functionality to them.These methods are basically functions.&lt;/p&gt;
&lt;p&gt;Class attributes on the other hand are created by assigning variables within the body of the class,eg ‘bank_name’ and ‘accs’ in the above example.They are accessible within the class.To access these attributes you will use the self$attribute parameter as explained above.&lt;/p&gt;
&lt;p&gt;To build our core banking system ,we will need some methods to offer functionality.At this point you will need the knowledge of R functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tldr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Tl;dr&lt;/strong&gt;&lt;/h2&gt;
&lt;div id=&#34;account-creation-method.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Account Creation method.&lt;/h3&gt;
&lt;p&gt;A client will need his/her First Name,Second Name and National ID Number for this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_account = function(FirstName=NULL,SecondName=NULL,IDNo=NULL) {
    FirstName = readline(prompt = &amp;quot;Enter FirstName: &amp;quot;)
    SecondName = readline(prompt = &amp;quot;Enter SecondName: &amp;quot;)
    IDNo = readline(prompt = &amp;quot;Enter IDNo: &amp;quot;)
    id_acc = private$account_setup(IDNo)
    account_details = tibble(&amp;quot;Full Name&amp;quot; = paste(FirstName,SecondName),&amp;quot;IDNo&amp;quot; = as.character(pluck(id_acc,&amp;#39;IDNo&amp;#39;)),
                             &amp;#39;AccountNo&amp;#39; = pluck(id_acc,&amp;#39;accno&amp;#39;),&amp;#39;AccountBalance&amp;#39; = 0,&amp;#39;LoanBalance&amp;#39; = 0)
    self$accs = bind_rows(self$accs,account_details) %&amp;gt;% filter(!is.na(IDNo))
    cat(sprintf(&amp;quot;Hi %s, welcome to ABCBank.We look foward to doing business  with you!\nYour account number is %s&amp;quot;,FirstName,account_details$AccountNo))
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above function simply creates a tibble data frame of the newly created account and adds it to the existing accounts.Other properties like &lt;code&gt;private$&lt;/code&gt; included will be explained bellow.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;deposit-method&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Deposit Method&lt;/h3&gt;
&lt;p&gt;In order for our clients to make deposits,we will require their loan accounts and amount to be deposited as shown in the function below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;make_deposit = function(acc=NULL,Amount=NULL){
    acc = readline(prompt = &amp;quot;Enter acc &amp;quot;)
    Amount = as.numeric(readline(prompt = &amp;quot;Enter Amount &amp;quot;))
    private$check_acc(acc = acc,expr = {
      self$accs = self$accs %&amp;gt;% mutate(AccountBalance = ifelse(AccountNo == acc,AccountBalance+Amount,AccountBalance))
      cat(glue(&amp;quot;Dear Customer,your deposit of Ksh {Amount} was received successfully.Your current balance is Ksh {
                   pull(filter(self$accs,AccountNo == acc),AccountBalance )}&amp;quot;))})
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can notice that a message is sent to the client after making the deposit.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;withdrawal-method&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Withdrawal method&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;make_withdrawal = function(acc=NULL,Amount=NULL){
    acc = readline(prompt = &amp;quot;Enter acc &amp;quot;)
    Amount =  as.numeric(readline(prompt = &amp;quot;Enter Amount &amp;quot;))
    private$check_acc(acc = acc,expr = {
      info = filter(self$accs,AccountNo == acc)
      if ( (pull(info,AccountBalance) - 100) &amp;gt; Amount ) {
        self$accs &amp;lt;- self$accs %&amp;gt;% mutate(
          AccountBalance = ifelse(AccountNo == acc,AccountBalance - Amount,AccountBalance)
        )
      }else{
        message(paste(&amp;#39; ----------\n Dear &amp;#39;,pull(info,`Full Name`),&amp;#39;,we are unable to process a your request due to low balance in your account.Please try a lower value&amp;#39;))
      }
    })
    
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quick overview of whats going on here:
In order for a withdrawal to be successful ,correct account is supplied plus an amount which wont leave the account with less than Ksh 100.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;account-balance&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Account Balance&lt;/h3&gt;
&lt;p&gt;To check account balance we need just the account number then following is just simple filter method from all the accounts.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;check_balance = function(acc=NULL){
    acc = readline(prompt = &amp;quot;Enter acc &amp;quot;)
    private$check_acc(acc = acc,expr = {
     balance =  self$accs %&amp;gt;% filter(AccountNo == acc) %&amp;gt;% pull(AccountBalance)
     message(glue(&amp;quot;--------------\n Dear Customer,your account balance is Ksh {balance}.\n--------------&amp;quot;))
    })
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;loan-request-method&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Loan Request Method&lt;/h3&gt;
&lt;p&gt;All this method does is simply to check if supplied account number is accurate,check if the client has existing loan to avoid multiple loan disbursements.&lt;/p&gt;
&lt;p&gt;Notice that to access client database you need the &lt;code&gt;self$accs&lt;/code&gt; which has the list of all clients.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;request_loan = function(acc=NULL,Amount=NULL){
    acc = readline(prompt = &amp;quot;Enter acc &amp;quot;)
    Amount =  as.numeric(readline(prompt = &amp;quot;Enter Amount &amp;quot;))
    private$check_acc(acc = acc,expr = {
      info = filter(self$accs,AccountNo == acc)
      if ( (pull(info,LoanBalance)) &amp;lt;= 0 ) {
        self$accs = self$accs %&amp;gt;% mutate(LoanBalance = ifelse(AccountNo == acc,Amount,LoanBalance))
        cat(glue(&amp;quot;Dear Customer,your loan request of Ksh {Amount} was processed successfully.
                 Your outstanding loan balance is Ksh {pull(filter(self$accs,AccountNo == acc),LoanBalance )}&amp;quot;))
      }else{
        message(glue(&amp;quot;Dear Customer,your loan request of Ksh {Amount} was not successfull.
                     Please clear your outstanding loan balance of Ksh {pull(filter(self$accs,AccountNo == acc),LoanBalance )}.&amp;quot;))
      }
    })
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;loan-repayment&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Loan Repayment&lt;/h2&gt;
&lt;p&gt;Same as the above,we only need the account number and amount to be repaid.If the amount is more than the balance,the extra amount is added to the transnational account balance.&lt;/p&gt;
&lt;p&gt;If the clients tries to repay a loan which inst existing ,the program shuts and the transaction is canceled.&lt;/p&gt;
&lt;p&gt;Nice ,right?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt; repay_loan = function(acc=NULL,Amount=NULL) {
    acc = readline(prompt = &amp;quot;Enter acc &amp;quot;)
    Amount =  as.numeric(readline(prompt = &amp;quot;Enter Amount &amp;quot;))
    private$check_acc(acc = acc,expr = {
      info = filter(self$accs,AccountNo == acc)
      if ((pull(info,LoanBalance)) &amp;gt; 0 ) {
        self$accs = self$accs %&amp;gt;% mutate(LoanBalance = ifelse(AccountNo == acc,LoanBalance-Amount,LoanBalance),
                                         AccountBalance = ifelse((AccountNo == acc) &amp;amp; (LoanBalance&amp;lt;0),abs(LoanBalance)+AccountBalance,AccountBalance ),
                                         LoanBalance = ifelse(LoanBalance &amp;lt; 0 ,0,LoanBalance))
        if ( (pull(info,LoanBalance)) &amp;gt;= Amount ) {
          
          cat(glue(&amp;quot;Dear Customer,your loan payment of Ksh {Amount} was processed successfully.Your outstanding loan balance is Ksh {
                   pull(filter(self$accs,AccountNo == acc),LoanBalance )}&amp;quot;))
        }else{
          cat(glue(&amp;quot;Dear Customer,your loan payment of Ksh {Amount} was processed successfully.Your loan is cleared,extra amount of Ksh {abs((pull(info,LoanBalance)) - Amount)} was deposited in your transactional account&amp;quot;))
        }
      }else{
        message(&amp;quot;Dear Customer,you do not have an existing loan.&amp;quot;)
      }
    })
  }&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;checking-loan-balance&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Checking Loan Balance&lt;/h3&gt;
&lt;p&gt;Works same as Account balance check.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;check_loan_balance = function(acc=NULL){
    acc = readline(prompt = &amp;quot;Enter acc &amp;quot;)
    private$check_acc(acc = acc,expr = {
      balance =  self$accs %&amp;gt;% filter(AccountNo == acc) %&amp;gt;% pull(LoanBalance)
      cat(glue(&amp;quot;--------------\n Dear Customer,your loan account balance is Ksh {balance}.\n--------------&amp;quot;))
    })
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;simulating-ussd-in-the-console-method&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Simulating USSD in the console method&lt;/h3&gt;
&lt;p&gt;You would like the access all these methods with a single call of this class.We will access all the methods in the class using the &lt;code&gt;self$method&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;For efficiency purposes a new client who has just registered is taken to the menu straight away.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_services = function(acc = NULL) {
    if (is.null(acc)) {
      cat(&amp;#39;Welcome to ABC Banking Services!\nSelect\n1:Create new account\n2:Deposit\n3:Withdraw\n4:Request Loan\n5:Repay Loan\n6:My Account Balance\n7:My Loan Balance&amp;#39;)
      input &amp;lt;- readline(prompt=&amp;quot;Enter here: &amp;quot;) 
      switch (as.character(input),
              &amp;quot;1&amp;quot; = self$create_account(),&amp;quot;2&amp;quot; = self$make_deposit(),&amp;quot;3&amp;quot; = self$make_withdrawal(),
              &amp;quot;4&amp;quot; = self$request_loan(),&amp;quot;5&amp;quot; = self$repay_loan(),&amp;quot;6&amp;quot; = self$check_balance(),&amp;quot;7&amp;quot; = self$check_loan_balance()
      )
    }else{
      cat(paste(&amp;#39;-----------\nSelect\n1:Deposit\n2:Withdraw\n3:Request Loan\n4:Repay Loan\n5:My Account Balance\n6:My Loan Balance&amp;#39;))
      input &amp;lt;- readline(prompt=&amp;quot;Enter here: &amp;quot;) 
      switch (as.character(input),
              &amp;quot;1&amp;quot; = self$make_deposit(),&amp;quot;2&amp;quot; = self$make_withdrawal(),&amp;quot;3&amp;quot; = self$request_loan(),&amp;quot;4&amp;quot; = self$repay_loan(),
              &amp;quot;5&amp;quot; = self$check_balance(),&amp;quot;6&amp;quot; = self$check_loan_balance()
      )
    }
   
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;controlling-access-to-methods.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Controlling access to methods.&lt;/h2&gt;
&lt;p&gt;R6 classes has two main ways of controlling access.These are part of the class arguments but are not&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt; : An optional list of private members, which can be functions and non-functions.To access these methods,we use the &lt;code&gt;private$method&lt;/code&gt; or &lt;code&gt;private$attribute&lt;/code&gt; parameters.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In our models ,we can see that we called &lt;code&gt;private$check_acc&lt;/code&gt; and &lt;code&gt;private$account_setup&lt;/code&gt; methods.Lets explain what they do down here.&lt;/p&gt;
&lt;div id=&#34;private-methods-account_setup&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Private Methods : account_setup&lt;/h3&gt;
&lt;p&gt;This function generates new account numbers and checks if it is similar to any account previously generated.If this is true it generates again until a unique one is made.This ensures that the generated account number is unique.The function also check if a client tries to register twice with the same National ID Number.If so,the client is prompted to enter a new one.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;account_setup = function(IDNo) {
    if (nrow(filter(self$accs,!is.na(IDNo)) &amp;gt; 0 )) {
      accno =  paste0(&amp;quot;00&amp;quot;,substr(paste0(sample(1:100, 12, replace=F),collapse = &amp;quot;&amp;quot;),1,9))
      while (accno %in% self$accs$AccountNo) {
        accno = as.character(rstudioapi::showPrompt(title = &amp;quot;IDNo&amp;quot;,message = &amp;quot;Enter here&amp;quot;))
      }
    }else{
      accno =  paste0(&amp;quot;00&amp;quot;,substr(paste0(sample(1:100, 12, replace=F),collapse = &amp;quot;&amp;quot;),1,9))
    }
    # check if user exists
    if (nrow(filter(self$accs,!is.na(IDNo)) &amp;gt; 0 )) {
      while (IDNo %in% self$accs$IDNo) {
        IDNo = as.character(rstudioapi::showPrompt(title = &amp;quot;IDNo&amp;quot;,message = &amp;quot;That ID already exists,Enter correct IDNo &amp;quot;))
      }
    }else{
      IDNo = IDNo
    }
    out = list(
      &amp;#39;IDNo&amp;#39; = IDNo,
      &amp;#39;accno&amp;#39; = accno
    )
    return(out)
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;private-methods-check_acc&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Private Methods : check_acc&lt;/h3&gt;
&lt;p&gt;For any transaction,we will need an account number.It is therefore important to check the validity of the account entered using one single function defined in the private method as shown.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt; check_acc = function(acc,expr={...}) {
       if (acc %in% self$accs$AccountNo) {
         expr
       }else{
         message(&amp;quot;Account Supplied doesn&amp;#39;t exist!&amp;quot;)
       }
     }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;final-program&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Final Program&lt;/h2&gt;
&lt;p&gt;All the way up to this point,below is the all the methods and attribute combined in the class.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;CBS &amp;lt;- R6Class(classname = &amp;quot;CBS&amp;quot;,public = list(
  accs = tibble(&amp;quot;Full Name&amp;quot; = NA,&amp;quot;IDNo&amp;quot; = NA,&amp;#39;AccountNo&amp;#39; = NA,&amp;#39;AccountBalance&amp;#39; = NA,&amp;#39;LoanBalance&amp;#39; = NA),
  bank_name = NA,
  initialize = function(accs = NULL,bank_name) {
    self$bank_name = bank_name
    cat(paste(&amp;#39; --------- \n This is &amp;#39;,self$bank_name,&amp;#39;. \n --------- \n&amp;#39;))
  },
  create_account = function(FirstName=NULL,SecondName=NULL,IDNo=NULL) {
    FirstName = readline(prompt = &amp;quot;Enter FirstName: &amp;quot;)
    SecondName = readline(prompt = &amp;quot;Enter SecondName: &amp;quot;)
    IDNo = readline(prompt = &amp;quot;Enter IDNo: &amp;quot;)
    id_acc = private$account_setup(IDNo)
    account_details = tibble(
        &amp;quot;Full Name&amp;quot; = paste(FirstName,SecondName),
        &amp;quot;IDNo&amp;quot; = as.character(pluck(id_acc,&amp;#39;IDNo&amp;#39;)),
        &amp;#39;AccountNo&amp;#39; = pluck(id_acc,&amp;#39;accno&amp;#39;),
        &amp;#39;AccountBalance&amp;#39; = 0,
        &amp;#39;LoanBalance&amp;#39; = 0
      )
    self$accs = bind_rows(self$accs,account_details) %&amp;gt;% filter(!is.na(IDNo))
    cat(sprintf(&amp;quot;Hi %s, welcome to ABCBank.We look foward to doing business  with you!\nYour account number is %s&amp;quot;,
                FirstName,account_details$AccountNo))
    self$get_services(acc = account_details$AccountNo)
    # return(invisible(account_details))
  },
  make_deposit = function(acc=NULL,Amount=NULL){
    acc = readline(prompt = &amp;quot;Enter acc &amp;quot;)
    Amount = as.numeric(readline(prompt = &amp;quot;Enter Amount &amp;quot;))
    private$check_acc(acc = acc,expr = {
      self$accs = self$accs %&amp;gt;% mutate(AccountBalance = ifelse(AccountNo == acc,AccountBalance+Amount,AccountBalance))
      cat(glue(&amp;quot;Dear Customer,your deposit of Ksh {Amount} was received successfully.Your current balance is Ksh {
                   pull(filter(self$accs,AccountNo == acc),AccountBalance )}&amp;quot;))})
  },
  make_withdrawal = function(acc=NULL,Amount=NULL){
    acc = readline(prompt = &amp;quot;Enter acc &amp;quot;)
    Amount =  as.numeric(readline(prompt = &amp;quot;Enter Amount &amp;quot;))
    private$check_acc(acc = acc,expr = {
      info = filter(self$accs,AccountNo == acc)
      if ( (pull(info,AccountBalance) - 100) &amp;gt; Amount ) {
        self$accs &amp;lt;- self$accs %&amp;gt;% mutate(
          AccountBalance = ifelse(AccountNo == acc,AccountBalance - Amount,AccountBalance)
        )
      }else{
        message(paste(&amp;#39; ----------\n Dear &amp;#39;,pull(info,`Full Name`),&amp;#39;,we are unable to process a your request due to low balance in your account.Please try a lower value&amp;#39;))
      }
    })
    
  },
  check_balance = function(acc=NULL){
    acc = readline(prompt = &amp;quot;Enter acc &amp;quot;)
    private$check_acc(acc = acc,expr = {
     balance =  self$accs %&amp;gt;% filter(AccountNo == acc) %&amp;gt;% pull(AccountBalance)
     message(glue(&amp;quot;--------------\n Dear Customer,your account balance is Ksh {balance}.\n--------------&amp;quot;))
    })
  },
  # loans
  request_loan = function(acc=NULL,Amount=NULL){
    acc = readline(prompt = &amp;quot;Enter acc &amp;quot;)
    Amount =  as.numeric(readline(prompt = &amp;quot;Enter Amount &amp;quot;))
    private$check_acc(acc = acc,expr = {
      info = filter(self$accs,AccountNo == acc)
      if ( (pull(info,LoanBalance)) &amp;lt;= 0 ) {
        self$accs = self$accs %&amp;gt;% mutate(LoanBalance = ifelse(AccountNo == acc,Amount,LoanBalance))
        cat(glue(&amp;quot;Dear Customer,your loan request of Ksh {Amount} was processed successfully.Your outstanding loan balance is Ksh {
                   pull(filter(self$accs,AccountNo == acc),LoanBalance )}&amp;quot;))
      }else{
        message(glue(&amp;quot;Dear Customer,your loan request of Ksh {Amount} was not successfull.Please clear your outstanding loan balance of Ksh {
                   pull(filter(self$accs,AccountNo == acc),LoanBalance )}.&amp;quot;))
      }
    })
  },
  repay_loan = function(acc=NULL,Amount=NULL) {
    acc = readline(prompt = &amp;quot;Enter acc &amp;quot;)
    Amount =  as.numeric(readline(prompt = &amp;quot;Enter Amount &amp;quot;))
    private$check_acc(acc = acc,expr = {
      info = filter(self$accs,AccountNo == acc)
      if ((pull(info,LoanBalance)) &amp;gt; 0 ) {
        self$accs = self$accs %&amp;gt;% mutate(LoanBalance = ifelse(AccountNo == acc,LoanBalance-Amount,LoanBalance),
                                         AccountBalance = ifelse((AccountNo == acc) &amp;amp; (LoanBalance&amp;lt;0),abs(LoanBalance)+AccountBalance,AccountBalance ),
                                         LoanBalance = ifelse(LoanBalance &amp;lt; 0 ,0,LoanBalance))
        if ( (pull(info,LoanBalance)) &amp;gt;= Amount ) {
          
          cat(glue(&amp;quot;Dear Customer,your loan payment of Ksh {Amount} was processed successfully.Your outstanding loan balance is Ksh {
                   pull(filter(self$accs,AccountNo == acc),LoanBalance )}&amp;quot;))
        }else{
          cat(glue(&amp;quot;Dear Customer,your loan payment of Ksh {Amount} was processed successfully.Your loan is cleared,extra amount of Ksh {abs((pull(info,LoanBalance)) - Amount)} was deposited in your transactional account&amp;quot;))
        }
      }else{
        message(&amp;quot;Dear Customer,you do not have an existing loan.&amp;quot;)
      }
    })
  },
  check_loan_balance = function(acc=NULL){
    acc = readline(prompt = &amp;quot;Enter acc &amp;quot;)
    private$check_acc(acc = acc,expr = {
      balance =  self$accs %&amp;gt;% filter(AccountNo == acc) %&amp;gt;% pull(LoanBalance)
      cat(glue(&amp;quot;--------------\n Dear Customer,your loan account balance is Ksh {balance}.\n--------------&amp;quot;))
    })
  },
  # simulate USSD!
  get_services = function(acc = NULL) {
    if (is.null(acc)) {
      cat(&amp;#39;Welcome to ABC Banking Services!\nSelect\n1:Create new account\n2:Deposit\n3:Withdraw\n4:Request Loan\n5:Repay Loan\n6:My Account Balance\n7:My Loan Balance&amp;#39;)
      input &amp;lt;- readline(prompt=&amp;quot;Enter here: &amp;quot;) 
      switch (as.character(input),
              &amp;quot;1&amp;quot; = self$create_account(),
              &amp;quot;2&amp;quot; = self$make_deposit(),
              &amp;quot;3&amp;quot; = self$make_withdrawal(),
              &amp;quot;4&amp;quot; = self$request_loan(),
              &amp;quot;5&amp;quot; = self$repay_loan(),
              &amp;quot;6&amp;quot; = self$check_balance(),
              &amp;quot;7&amp;quot; = self$check_loan_balance()
      )
    }else{
      cat(paste(&amp;#39;-----------\nSelect\n1:Deposit\n2:Withdraw\n3:Request Loan\n4:Repay Loan\n5:My Account Balance\n6:My Loan Balance\n&amp;#39;))
      input &amp;lt;- readline(prompt=&amp;quot;Enter here: \n--------------\n&amp;quot;) 
      switch (as.character(input),
              &amp;quot;1&amp;quot; = self$make_deposit(),
              &amp;quot;2&amp;quot; = self$make_withdrawal(),
              &amp;quot;3&amp;quot; = self$request_loan(),
              &amp;quot;4&amp;quot; = self$repay_loan(),
              &amp;quot;5&amp;quot; = self$check_balance(),
              &amp;quot;6&amp;quot; = self$check_loan_balance()
      )
    }
   
  }), 
  private = list(
     account_setup = function(IDNo) {
    if (nrow(filter(self$accs,!is.na(IDNo)) &amp;gt; 0 )) {
      accno =  paste0(&amp;quot;00&amp;quot;,substr(paste0(sample(1:100, 12, replace=F),collapse = &amp;quot;&amp;quot;),1,9))
      while (accno %in% self$accs$AccountNo) {
        accno = as.character(rstudioapi::showPrompt(title = &amp;quot;IDNo&amp;quot;,message = &amp;quot;Enter here&amp;quot;))
      }
    }else{
      accno =  paste0(&amp;quot;00&amp;quot;,substr(paste0(sample(1:100, 12, replace=F),collapse = &amp;quot;&amp;quot;),1,9))
    }
    # check if user exists
    if (nrow(filter(self$accs,!is.na(IDNo)) &amp;gt; 0 )) {
      while (IDNo %in% self$accs$IDNo) {
        IDNo = as.character(rstudioapi::showPrompt(title = &amp;quot;IDNo&amp;quot;,message = &amp;quot;That ID already exists,Enter correct IDNo &amp;quot;))
      }
    }else{
      IDNo = IDNo
    }
    out = list(
      &amp;#39;IDNo&amp;#39; = IDNo,
      &amp;#39;accno&amp;#39; = accno
    )
    return(out)
  },
     check_acc = function(acc,expr={...}) {
       if (acc %in% self$accs$AccountNo) {
         expr
       }else{
         message(&amp;quot;Account Supplied doesn&amp;#39;t exist!&amp;quot;)
       }
     }
))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets instantiate&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ABCBank &amp;lt;- CBS$new(bank_name = &amp;quot;ABC Bank&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  --------- 
##  This is  ABC Bank . 
##  ---------&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;introspection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introspection&lt;/h2&gt;
&lt;p&gt;We can always inspect our classes using the &lt;code&gt;class&lt;/code&gt; function and use &lt;code&gt;names&lt;/code&gt; function to get a list of all methods contained in a class as shown below from an instanciation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(ABCBank)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;CBS&amp;quot; &amp;quot;R6&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see it shows that our instance is from the CBS class and it inherits from R6 class.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(ABCBank)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;.__enclos_env__&amp;quot;    &amp;quot;bank_name&amp;quot;          &amp;quot;accs&amp;quot;              
##  [4] &amp;quot;clone&amp;quot;              &amp;quot;get_services&amp;quot;       &amp;quot;check_loan_balance&amp;quot;
##  [7] &amp;quot;repay_loan&amp;quot;         &amp;quot;request_loan&amp;quot;       &amp;quot;check_balance&amp;quot;     
## [10] &amp;quot;make_withdrawal&amp;quot;    &amp;quot;make_deposit&amp;quot;       &amp;quot;create_account&amp;quot;    
## [13] &amp;quot;initialize&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All the methods discussed above are listed here.&lt;/p&gt;
&lt;p&gt;Lets see a simple example of our system.&lt;/p&gt;
&lt;p&gt;To use this system interactively,run the class above ,instantiate then call &lt;code&gt;get_services&lt;/code&gt; method.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ABCBank$get_services()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Welcome to ABC Banking Services!
## Select
## 1:Create new account
## 2:Deposit
## 3:Withdraw
## 4:Request Loan
## 5:Repay Loan
## 6:My Account Balance
## 7:My Loan BalanceEnter here:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;finallly-.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Finallly .&lt;/h2&gt;
&lt;p&gt;Its important to note that when defining a method in a class you do not use &lt;code&gt;&amp;lt;-&lt;/code&gt; operator for assignment but the standard &lt;code&gt;=&lt;/code&gt; sign.&lt;/p&gt;
&lt;p&gt;I will write about class inheritance and and other OOP concepts in R in my next blog.You are free to copy this script and play with it in your R studio console.&lt;/p&gt;
&lt;p&gt;All the best.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Unsupervised learning, a quick take on hierarchical clustering..</title>
      <link>https://georgeoduor.netlify.app/post/python/hierachical_clustering/hierarchical_clustering/</link>
      <pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://georgeoduor.netlify.app/post/python/hierachical_clustering/hierarchical_clustering/</guid>
      <description>
&lt;script src=&#34;https://georgeoduor.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;what-is-clustering&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What is Clustering?&lt;/h2&gt;
&lt;p&gt;Clustering means finding clusters in a dataset unsupervised. Unsupervised in this case means that there are no predictor and response variables.&lt;/p&gt;
&lt;p&gt;What we are going to learn here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is Clustering&lt;/li&gt;
&lt;li&gt;What is a Cluster?&lt;/li&gt;
&lt;li&gt;Difference between clustering and classification.&lt;/li&gt;
&lt;li&gt;Uses of Clustering in different industries.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;why-clustering&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why clustering?&lt;/h2&gt;
&lt;div id=&#34;clustering-algorithms.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Clustering algorithms.&lt;/h3&gt;
&lt;div id=&#34;hierarchical-clustering--deep-dive.&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Hierarchical Clustering -Deep dive.&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;what-is-a-cluster&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What is a Cluster?&lt;/h3&gt;
&lt;p&gt;A cluster is a group of objects that are similar to other objects in the cluster and dissimilar to data points in other clusters.&lt;/p&gt;
&lt;p&gt;When observations are clustered in a particular dataset, they have partitioned into distinct groups in such a way that the observations within each group are very similar to each other.
Difference between clustering and classification.
Classification predicts categorical class labels which mean assigning instances to predefined classes in a supervised model while clustering simply groups similar observations together in an unsupervised fashion.&lt;/p&gt;
&lt;p&gt;Uses of Clustering in different industries.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Retail/Marketing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Identifying buying patterns of customers.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Recommending new books or movies to new customers&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Banking:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fraud detection in credit card use&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Identifying clusters of customers&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Insurance:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fraud detection in claims analysis.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Insurance risk of customers.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Publication:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Auto-categorizing news based on their content&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Recommending similar news articles&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Medicine:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Characterizing patient behavior&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Biology:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Clustering genetic markers to identify family ties.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;why-clustering-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why clustering?&lt;/h2&gt;
&lt;p&gt;In data analysis we can make use of clustering to achieve the following:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Exploratory data analysis.&lt;/li&gt;
&lt;li&gt;Summary Generation.&lt;/li&gt;
&lt;li&gt;Outlier detection.&lt;/li&gt;
&lt;li&gt;Finding duplicates&lt;/li&gt;
&lt;li&gt;Pre-processing step.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;clustering-algorithms.-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Clustering algorithms.&lt;/h2&gt;
&lt;p&gt;Clustering is so popular in many fields and below are some of the clustering algorithms.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Partition Based Algorithms:&lt;/li&gt;
&lt;li&gt;Hierarchical clustering:&lt;/li&gt;
&lt;li&gt;Density-Based algorithm&lt;/li&gt;
&lt;li&gt;K- Means Clustering.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;hierarchical-clustering-algorithm.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Hierarchical Clustering Algorithm.&lt;/h2&gt;
&lt;p&gt;This particular type of clustering method creates a tree-based representation of observations called a dendrogram.
Hierarchical clustering algorithms build a hierarchy of clusters where each node is a cluster consists of the clusters of its daughter nodes.
Hierarchical clustering strategies generally fall into two types:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Divisive (Top-down approach)&lt;/strong&gt;
Start with all observations and break it down into smaller pieces.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Agglomerative(Bottom-up approach)&lt;/strong&gt;
Each observation starts the cluster and pairs up as they move the hierarchy. Agglomeration simply means to collect things up. The agglomerative approach is very popular and works in a similar way which humans think.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;understanding-a-dendrogram-and-the-agglomerative-approach.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Understanding a dendrogram and the agglomerative approach.&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;So how does it work?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This method builds a hierarchy from individual elements by progressively merging clusters.&lt;/p&gt;
&lt;p&gt;In a dendrogram, each leaf represents one of the data points. As we move up the tree some observations fuse together to form branches.&lt;/p&gt;
&lt;p&gt;These observations that fuse together are very similar to each other or close to one another. Further up the tree, branches fuse with other branches or observations.&lt;/p&gt;
&lt;p&gt;The height of the fusions indicates how the two observations or clusters are different. Let me plot a simple plot of face data here to see how this comes about.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;1_ct133MO5QTvyhPHtZpx0Sw.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;aglomerative&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the plot to the left, we can see the points plotted in a 2D scatter plot, and a dendrogram of the same is done in the second plot.&lt;/p&gt;
&lt;p&gt;Let’s understand how the program makes the dendrogram in the right figure. Assume the points represent cities in Kenya and we want to cluster them based on their distance from each other. Distance between the points can be calculated by many methods including euclidian distance.&lt;/p&gt;
&lt;p&gt;Looking at the scatter plot on the left side points 3 and 4 are the closest therefore they will be fused together and they will form a cluster. This leaves us with n -1 =7 clusters. The distance between them is represented by the height of the cluster formed.&lt;/p&gt;
&lt;p&gt;By checking the distance between points 1 and 2 relative to other points we find they are the closest so we will make a cluster with them. Using the first cluster between 3 and 4 we can see that it’s closer to five than the cluster between 1 and 2 so so we will fuse this cluster with point 5.&lt;/p&gt;
&lt;p&gt;This process continues progressively up the tree to make the dendrogram.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;identifying-the-clusters-based-on-the-dendrogram.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Identifying the clusters based on the dendrogram.&lt;/h2&gt;
&lt;p&gt;So how do we identify the clusters based on this dendrogram? To get the optimal number of clusters, the dendrogram is cut at a point where the vertical lines are highest and not crossing any horizontal line.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;hierarchical-algorithm.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Hierarchical Algorithm.&lt;/h2&gt;
&lt;p&gt;After Understanding the concept, let’s see the algorithm on how to build this in simple and easy to understand steps.
1. Make each datapoint a single point cluster; from N clusters
1. Take two closest data points and make them one cluster; forms N-1 clusters.
1. Take the two closest clusters and make them one cluster; forms N-2 Clusters
1. Repeat step 3 until there is one cluster remaining.
1. Defining the Dissimilarity measure between two points.&lt;/p&gt;
&lt;p&gt;A question arises on how we chose which cluster to be fused with which. In simple terms how did we decide on the dissimilarity between two clusters?&lt;/p&gt;
&lt;p&gt;This problem is easily solved by the concept of the linkage which defines the dissimilarity between two groups of observations. There are 4 main types of linkages namely:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Complete linkage:&lt;/strong&gt; takes the largest of the dissimilarities between the observations in two clusters after computing all pairwise dissimilarities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Average linkage&lt;/strong&gt; takes the average of the dissimilarities between the observations in two clusters after computing all pairwise dissimilarities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Single linkage&lt;/strong&gt; takes the smallest of the dissimilarities between the observations in two clusters after computing all pairwise dissimilarities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Centroid linkage&lt;/strong&gt;: takes the dissimilarity between the centroid of cluster A and centroid of cluster B&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;choosing-the-dissimilarity-measure.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Choosing the Dissimilarity Measure.&lt;/h2&gt;
&lt;p&gt;Choosing the dissimilarity measure in this algorithm depends on the domain knowledge of what one is doing.&lt;/p&gt;
&lt;p&gt;Feature scaling is recommended in order to take care of outliers in the dataset.&lt;/p&gt;
&lt;p&gt;The two decisions above are very fragile and should be made with great care as they greatly affect the result of the model.&lt;/p&gt;
&lt;p&gt;See hierarchical clustering project in action here with python.&lt;/p&gt;
&lt;p&gt;Thanks for reading, any comment and or suggestions are welcome.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
